// ==UserScript==
// @name         Händlerlogo im Deal
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Fügt das Logo des Händlers als Hintergrund in den Deal
// @author       Flo (https://github.com/9jS2PL5T) (https://www.mydealz.de/profile/Basics0119)
// @match        https://www.mydealz.de/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Constants
    const PROCESSED_ATTR = 'data-bg-processed';

    // Extract merchant ID from deal
    const getMerchantId = (dealElement) => {
        try {
            // Find merchant link with either pattern
            const merchantLink = dealElement.querySelector('a[href*="deals?merchant-id="], a[href*="gutscheine?merchant-id="]');
            if (!merchantLink) return null;

            // Extract ID from either URL pattern
            const match = merchantLink.href.match(/merchant-id=(\d+)/);
            return match ? match[1] : null;
        } catch (error) {
            console.debug('[Merchant BG] Error extracting merchant ID:', error);
            return null;
        }
    };

    // Build logo URL for merchant
    const getLogoUrl = (merchantId, version = 1) => {
        return `https://static.mydealz.de/merchants/raw/avatar/${merchantId}_${version}/re/140x140/qt/70/${merchantId}_${version}.jpg`;
    };

    const checkLogoExists = async (url) => {
        try {
            const response = await fetch(url, { method: 'HEAD' });
            return response.ok;
        } catch (error) {
            return false;
        }
    };

    // Add cache management
    const logoCache = {
        // Cache in localStorage to persist between page loads
        set: (merchantId, status) => {
            try {
                localStorage.setItem(`logo_${merchantId}`, JSON.stringify({
                    exists: status.exists,
                    url: status.url,
                    version: status.version,
                    timestamp: Date.now()
                }));
            } catch (e) {
                console.debug('[Logo Cache] Storage failed:', e);
            }
        },

        get: function(merchantId) { // Changed to standard JavaScript function syntax
            try {
                const data = localStorage.getItem(`logo_${merchantId}`);
                if (!data) return null;

                const parsed = JSON.parse(data);
                // Expire after 24h
                if (Date.now() - parsed.timestamp > 24 * 60 * 60 * 1000) {
                    localStorage.removeItem(`logo_${merchantId}`);
                    return null;
                }
                return parsed.status;
            } catch (e) {
                console.error(`Error getting logo cache for merchant ${merchantId}:`, e);
                return null;
            }
        }
    };

    // Throttle requests
    const queue = []; // Removed TypeScript type
    let processing = false;

    const findLatestLogoVersion = async function(merchantId) { // Removed TypeScript types
        try {
            let highestVersion = null;
            // Try versions 1-3
            for (let version = 1; version <= 3; version++) {
                const url = getLogoUrl(merchantId, version);
                const exists = await checkLogoExists(url);
                if (exists) {
                    highestVersion = version;
                }
            }
            return highestVersion;
        } catch (error) {
            console.error(`Error checking logo versions for merchant ${merchantId}:`, error);
            return null;
        }
    };

    const processQueue = async () => {
        if (processing || queue.length === 0) return;
        processing = true;

        try {
            const deal = queue.shift();
            if (!deal) return;

            const merchantId = getMerchantId(deal);
            if (!merchantId) return;

            // Check cache first
            const cached = logoCache.get(merchantId);
            if (cached) {
                console.debug(`[Logo Cache] Hit for merchant ${merchantId} version ${cached.version}`);
                applyLogo(deal, cached.url);
                return;
            }

            // Find latest version
            const version = await findLatestLogoVersion(merchantId);
            if (!version) return;

            const logoUrl = getLogoUrl(merchantId, version);

            // Cache result
            logoCache.set(merchantId, {
                exists: true,
                url: logoUrl,
                version
            });

            // Apply logo
            console.debug(`[Logo] Found for merchant ${merchantId} at version ${version}`);
            applyLogo(deal, logoUrl);

        } catch (error) {
            console.error('Error processing queue:', error);
        } finally {
            processing = false;
            if (queue.length > 0) {
                void processQueue();
            }
        }
    };

    const applyLogo = (deal, logoUrl) => {
        if (!logoUrl || !deal || deal.querySelector('.merchant-logo-bg')) return;

        // Set deal content styles
        deal.style.position = 'relative';
        deal.style.overflow = 'hidden';

        // Create and style logo container
        const container = document.createElement('div');
        container.classList.add('merchant-logo-bg'); // Add class for tracking
        container.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 200px;
            height: 200px;
            background-image: url("${logoUrl}");
            background-size: contain;
            background-position: center;
            background-repeat: no-repeat;
            border-radius: 50%;
            opacity: 0.25;
            pointer-events: none;
            z-index: 0;
        `;

        deal.insertBefore(container, deal.firstChild);
        deal.setAttribute(PROCESSED_ATTR, 'true');
    };

    // Add type safety
    const processDeal = (deal) => {
        if (!deal || deal.hasAttribute(PROCESSED_ATTR)) return;
        queue.push(deal);
        void processQueue(); // Handle promise
    };

    // Debounce observer callback
    const debounce = (fn, delay) => {
        let timeoutId;
        return (...args) => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => fn(...args), delay);
        };
    };

    // Create debounced processDeals
    const debouncedProcessDeals = debounce(() => {
        document.querySelectorAll('article.thread--deal:not([data-bg-processed])')
            .forEach(element => {
            if (element instanceof HTMLElement && !element.querySelector('.merchant-logo-bg')) {
                processDeal(element);
            }
        });
    }, 250);

    // Update observer
    const observer = new MutationObserver(debouncedProcessDeals);

    // Add error handling
    const processDeals = () => {
        try {
            document.querySelectorAll('article.thread--deal:not([data-bg-processed])')
                .forEach((element) => {
                if (element instanceof HTMLElement) {
                    processDeal(element);
                }
            });
        } catch (error) {
            console.error('Error processing deals:', error);
        }
    };

    // Add cleanup
    // Start observing with disconnect handling
    try {
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        // Initial processing
        processDeals();
    } catch (error) {
        console.error('Error setting up observer:', error);
        observer.disconnect();
    }
})();
